/* unplugin-vue-components disabled */import { NButton as __unplugin_components_0 } from '/node_modules/.vite/deps/naive-ui.js?v=2fbffd03';
import { resolveComponent as _resolveComponent, createTextVNode as _createTextVNode, createVNode as _createVNode } from "/node_modules/.vite/deps/vue.js?v=2fbffd03";
import { defineComponent as _defineComponent } from '/node_modules/.vite/deps/vue.js?v=2fbffd03';
import { reactive, ref } from "/node_modules/.vite/deps/vue.js?v=2fbffd03";
import { NButton, NButtonGroup, NPopconfirm, NSpace, NImage, NTag } from "/node_modules/.vite/deps/naive-ui.js?v=2fbffd03";
import { fetchBuyAndSell, updateBuyAndSell, uploadDocument } from "/src/service/index.ts?t=1661656193982";
import { useBoolean, useLoading } from "/src/hooks/index.ts?t=1661656193982";
export default /*#__PURE__*/_defineComponent({
    __name: 'index',

    setup(__props, {
        expose
    }) {
        expose();
        const {
            loading,
            startLoading,
            endLoading
        } = useLoading(false);
        const {
            bool: visible,
            setTrue: openModal
        } = useBoolean(); // let { isIdUploaded, isSignUploaded } = ref<boolean>(false);

        let idUri = ref(""),
            signUri = ref("");
        const tableData = ref([]);
        let stream;

        function setTableData(data) {
            tableData.value = data;
        }

        let selectOptions = [];

        async function getPageData() {
            startLoading();
            const {
                data
            } = await fetchBuyAndSell();
            console.log(data);

            if (data) {
                setTimeout(() => {
                    setTableData(data);
                    selectOptions = data.map(({
                        userId
                    }) => ({
                        value: userId,
                        label: name
                    }));
                    endLoading();
                }, 1000);
            }
        }

        const columns = [{
            type: "selection",
            align: "center"
        }, {
            key: "type",
            title: "Type",
            align: "center",
            render: (h, i) => {
                const row = h;
                return _createVNode(NTag, {
                    "type": row.type === "Buy" ? "primary" : "error"
                }, {
                    default: () => [row.type === "Buy" ? "Buy" : "Sell"]
                });
            },
            width: "75px"
        }, {
            key: "isProcessed",
            title: "Processed",
            align: "center",
            render: (h, i) => {
                const row = h;
                return _createVNode(NTag, {
                    "type": row.isProcessed ? "primary" : "error"
                }, {
                    default: () => [row.isProcessed ? "Yes" : "No"]
                });
            },
            width: "75px"
        }, {
            key: "phone_no",
            title: "Phone",
            align: "center" // ellipsis: true,
            // width: "100px",

        }, {
            key: "wallet_address",
            title: "Wallet Addr.",
            align: "center",
            ellipsis: true // width: "120px",

        }, {
            key: "first_name",
            title: "First Name",
            align: "center",
            // ellipsis: true,
            width: "75px"
        }, {
            key: "last_name",
            title: "Last Name",
            align: "center",
            width: "75px"
        }, {
            key: "wallet_address",
            title: "Wallet Addr.",
            align: "center",
            ellipsis: true // width: "150px",

        }, {
            key: "usd_amount",
            title: "Amount",
            align: "center",
            // ellipsis: true,
            width: "120px"
        }, {
            key: "commission",
            title: "Commission",
            align: "center",
            // ellipsis: true,
            width: "120px"
        }, {
            key: "commission_percentage",
            title: "Commission %",
            align: "center",
            // ellipsis: true,
            width: "120px"
        }, {
            key: "actions",
            title: "Actions",
            align: "center",
            render: row => {
                const rowData = row;
                return _createVNode(NSpace, {
                    "justify": "center"
                }, {
                    default: () => [_createVNode(NButtonGroup, null, {
                        default: () => [_createVNode(NPopconfirm, {
                            "onPositiveClick": () => handleUpload(false, row),
                            "onNegativeClick": () => disposeUserMedia(),
                            "onClickoutside": () => disposeUserMedia(),
                            "positiveText": "Upload",
                            "onShow": () => renderUserMedia()
                        }, {
                            default: () => !row.signImage ? _createVNode("input", {
                                "class": "sign-file",
                                "type": "file",
                                "accept": "image/*",
                                "capture": "camera"
                            }, [_createTextVNode("Capture")]) : _createVNode(NImage, {
                                "width": "300",
                                "src": row.signImage
                            }, null),
                            trigger: () => _createVNode(NButton, {
                                "ghost": true,
                                "size": "small",
                                "type": row.signImage ? "primary" : "warning"
                            }, {
                                default: () => [_createTextVNode("Sign")]
                            })
                        }), _createVNode(NPopconfirm, {
                            "onPositiveClick": () => handleUpload(true, row),
                            "onNegativeClick": () => disposeUserMedia(),
                            "onClickoutside": () => disposeUserMedia(),
                            "positiveText": "Upload",
                            "negativeText": "Select File"
                        }, {
                            default: () => !row.idImage ? _createVNode("input", {
                                "class": "id-file",
                                "type": "file",
                                "accept": "image/*",
                                "capture": "camera"
                            }, [_createTextVNode("Capture")]) : _createVNode(NImage, {
                                "width": "300",
                                "src": row.idImage
                            }, null),
                            trigger: () => _createVNode(NButton, {
                                "ghost": true,
                                "size": "small",
                                "type": row.idImage ? "primary" : "warning"
                            }, {
                                default: () => [_createTextVNode("Id")]
                            })
                        }), _createVNode(NPopconfirm, {
                            "positiveText": "Approve",
                            "negativeText": "Reject",
                            "negativeButtonProps": {
                                color: "#E13C39"
                            },
                            "onPositiveClick": () => handleModifyRequest(rowData.id, true),
                            "onNegativeClick": () => handleModifyRequest(rowData.id, false)
                        }, {
                            default: () => _createVNode("div", {
                                "class": "flex"
                            }, [_createVNode("p", {
                                "class": "flex-auto p-2"
                            }, [_createTextVNode("\"Respond to this request\"")]), row.isProcessed ? _createVNode(__unplugin_components_0, {
                                "onclick": "printReceipt",
                                "class": "flex-auto"
                            }, {
                                default: () => [_createTextVNode("Print Receipt")]
                            }) : ""]),
                            trigger: () => _createVNode(NButton, {
                                "ghost": true,
                                "size": "small",
                                "type": row.idImage && row.signImage ? "success" : "warning",
                                "disabled": row.idImage && row.signImage ? false : true
                            }, {
                                default: () => [_createTextVNode("Respond")]
                            })
                        })]
                    })]
                });
            }
        }];

        const renderUserMedia = async () => {
            idUri.value = "", signUri.value = "";
            stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: false
            });
            const video = document.querySelector(".sign-video");
            video.srcObject = stream;

            video.onloadedmetadata = () => {
                video.play();
            };
        };

        const disposeUserMedia = () => {
            if (stream) {
                stream.getTracks().forEach(track => {
                    track.stop();
                });
            }
        };

        const printReceipt = () => {
            const content = "<div>hello</div>";
            const iframe = document.createElement("iframe");
            iframe.name = "myiframe";
            iframe.id = "printFrame";
            iframe.style.display = "none";
            document.body.appendChild(iframe);
            iframe.contentDocument?.write(content);
            setTimeout(() => {
                iframe.focus();
                iframe.contentWindow?.print();
                var frame = document.getElementById("printFrame");
                frame?.parentNode?.removeChild(frame);
            }, 200);
        };

        const captureUserMedia = isId => {
            const video = document.querySelector(".sign-video");
            video.pause();
            const canvas = document.querySelector(".sign-canvas");
            const context = canvas.getContext("2d");
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            isId ? idUri.value = canvas.toDataURL("image/png") : signUri.value = canvas.toDataURL("image/png");
            disposeUserMedia();
        };

        const handleUpload = async (isId, row) => {
            const file = document.querySelector(isId ? ".id-file" : ".sign-file");
            const reader = new FileReader();
            reader.readAsDataURL(file.files[0]);
            await new Promise(resolve => {
                reader.onload = async () => {
                    const res = await uploadDocument(reader.result);

                    if (res.data?.url) {
                        window.$message?.success("success");
                        tableData.value.forEach(r => {
                            if (r === row) {
                                isId ? row.idImage = res.data.url : row.signImage = res.data.url;
                            }
                        });
                        await updateBuyAndSell(row.id, isId ? {
                            idImage: res.data.url
                        } : {
                            signImage: res.data.url
                        });
                        resolve(true);
                    } else {
                        window.$message?.error("error");
                        resolve(false);
                    }
                };
            });
        };

        const modalType = ref("add");

        function setModalType(type) {
            modalType.value = type;
        }

        const editData = ref(null);

        function setEditData(data) {
            editData.value = data;
        }

        function handleEditTable(rowId) {
            const findItem = tableData.value.find(item => item.userId === rowId);

            if (findItem) {
                setEditData(findItem);
            }

            setModalType("edit");
            openModal();
        }

        const handleModifyRequest = async (orderId, status) => {
            const res = await updateBuyAndSell(orderId, {
                isProcessed: status
            });

            if (res.data != null) {
                const findItem = tableData.value.find(item => item.id === orderId);

                if (findItem) {
                    findItem.isProcessed = status;
                }
            }
        };

        function handleDeleteTable(rowId) {
            window.$message?.info(`点击了删除，rowId为${rowId}`);
        }

        const pagination = reactive({
            page: 1,
            pageSize: 10,
            showSizePicker: true,
            pageSizes: [10, 15, 20, 25, 30],
            onChange: page => {
                pagination.page = page;
            },
            onUpdatePageSize: pageSize => {
                pagination.pageSize = pageSize;
                pagination.page = 1;
            }
        });

        function init() {
            getPageData();
        }

        init();
        const __returned__ = {
            loading,
            startLoading,
            endLoading,
            visible,
            openModal,
            idUri,
            signUri,
            tableData,
            stream,
            setTableData,
            selectOptions,
            getPageData,
            columns,
            renderUserMedia,
            disposeUserMedia,
            printReceipt,
            captureUserMedia,
            handleUpload,
            modalType,
            setModalType,
            editData,
            setEditData,
            handleEditTable,
            handleModifyRequest,
            handleDeleteTable,
            pagination,
            init
        };
        Object.defineProperty(__returned__, '__isScriptSetup', {
            enumerable: false,
            value: true
        });
        return __returned__;
    }

});
//# sourceMappingURL=data:application/json;base64,