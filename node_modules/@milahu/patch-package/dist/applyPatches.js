"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyPatch = exports.applyPatchesForApp = void 0;
const chalk_1 = __importDefault(require("chalk"));
const patchFs_1 = require("./patchFs");
const apply_1 = require("./patch/apply");
const fs_extra_1 = require("fs-extra");
const path_1 = require("./path");
const path_2 = require("path");
const PackageDetails_1 = require("./PackageDetails");
const reverse_1 = require("./patch/reverse");
const semver_1 = __importDefault(require("semver"));
const read_1 = require("./patch/read");
const packageIsDevDependency_1 = require("./packageIsDevDependency");
class PatchApplicationError extends Error {
    constructor(msg) {
        super(msg);
    }
}
function findPatchFiles(patchesDirectory) {
    if (!(0, fs_extra_1.existsSync)(patchesDirectory)) {
        return [];
    }
    return (0, patchFs_1.getPatchFiles)(patchesDirectory);
}
function getInstalledPackageVersion({ appPath, path, pathSpecifier, isDevOnly, patchFilename, }) {
    const packageDir = (0, path_1.join)(appPath, path);
    if (!(0, fs_extra_1.existsSync)(packageDir)) {
        if (process.env.NODE_ENV === "production" && isDevOnly) {
            return null;
        }
        let err = `${chalk_1.default.red("Error:")} Patch file found for package ${path_2.posix.basename(pathSpecifier)}` + ` which is not present at ${(0, path_1.relative)(".", packageDir)}`;
        if (!isDevOnly && process.env.NODE_ENV === "production") {
            err += `

  If this package is a dev dependency, rename the patch file to
  
    ${chalk_1.default.bold(patchFilename.replace(".patch", ".dev.patch"))}
`;
        }
        throw new PatchApplicationError(err);
    }
    const { version } = require((0, path_1.join)(packageDir, "package.json"));
    // normalize version for `npm ci`
    const result = semver_1.default.valid(version);
    if (result === null) {
        throw new PatchApplicationError(`${chalk_1.default.red("Error:")} Version string '${version}' cannot be parsed from ${(0, path_1.join)(packageDir, "package.json")}`);
    }
    return result;
}
function applyPatchesForApp({ appPath, reverse, patchDir, shouldExitWithError, }) {
    const patchesDirectory = (0, path_1.join)(appPath, patchDir);
    const files = findPatchFiles(patchesDirectory);
    if (files.length === 0) {
        console.error(chalk_1.default.blueBright("No patch files found"));
        return;
    }
    const errors = [];
    const warnings = [];
    for (const filename of files) {
        try {
            const packageDetails = (0, PackageDetails_1.getPackageDetailsFromPatchFilename)(filename);
            if (!packageDetails) {
                warnings.push(`Unrecognized patch file in patches directory ${filename}`);
                continue;
            }
            const { name, version, path, pathSpecifier, isDevOnly, patchFilename, } = packageDetails;
            const installedPackageVersion = getInstalledPackageVersion({
                appPath,
                path,
                pathSpecifier,
                isDevOnly: isDevOnly ||
                    // check for direct-dependents in prod
                    (process.env.NODE_ENV === "production" &&
                        (0, packageIsDevDependency_1.packageIsDevDependency)({ appPath, packageDetails })),
                patchFilename,
            });
            if (!installedPackageVersion) {
                // it's ok we're in production mode and this is a dev only package
                console.log(`Skipping dev-only ${chalk_1.default.bold(pathSpecifier)}@${version} ${chalk_1.default.blue("✔")}`);
                continue;
            }
            if (applyPatch({
                patchFilePath: (0, path_1.resolve)(patchesDirectory, filename),
                reverse,
                packageDetails,
                patchDir,
            })) {
                // yay patch was applied successfully
                // print warning if version mismatch
                if (installedPackageVersion !== version) {
                    warnings.push(createVersionMismatchWarning({
                        packageName: name,
                        actualVersion: installedPackageVersion,
                        originalVersion: version,
                        pathSpecifier,
                        path,
                    }));
                }
                console.log(`${chalk_1.default.bold(pathSpecifier)}@${version} ${chalk_1.default.green("✔")}`);
            }
            else if (installedPackageVersion === version) {
                // completely failed to apply patch
                // TODO: propagate useful error messages from patch application
                errors.push(createBrokenPatchFileError({
                    packageName: name,
                    patchFileName: filename,
                    pathSpecifier,
                    path,
                }));
            }
            else {
                errors.push(createPatchApplictionFailureError({
                    packageName: name,
                    actualVersion: installedPackageVersion,
                    originalVersion: version,
                    patchFileName: filename,
                    path,
                    pathSpecifier,
                }));
            }
        }
        catch (error) {
            if (error instanceof PatchApplicationError) {
                errors.push(error.message);
            }
            else {
                errors.push(createUnexpectedError({ filename, error }));
            }
        }
    }
    for (const warning of warnings) {
        console.warn(warning);
    }
    for (const error of errors) {
        console.error(error);
    }
    const problemsSummary = [];
    if (warnings.length) {
        problemsSummary.push(chalk_1.default.yellow(`${warnings.length} warning(s)`));
    }
    if (errors.length) {
        problemsSummary.push(chalk_1.default.red(`${errors.length} error(s)`));
    }
    if (problemsSummary.length) {
        console.error("---");
        console.error("patch-package finished with", problemsSummary.join(", ") + ".");
    }
    if (errors.length) {
        process.exit(shouldExitWithError ? 1 : 0);
    }
}
exports.applyPatchesForApp = applyPatchesForApp;
function applyPatch({ patchFilePath, reverse, packageDetails, patchDir, }) {
    const patch = (0, read_1.readPatch)({ patchFilePath, packageDetails, patchDir });
    try {
        (0, apply_1.executeEffects)(reverse ? (0, reverse_1.reversePatch)(patch) : patch, { dryRun: false });
    }
    catch (e) {
        try {
            (0, apply_1.executeEffects)(reverse ? patch : (0, reverse_1.reversePatch)(patch), { dryRun: true });
        }
        catch (e) {
            return false;
        }
    }
    return true;
}
exports.applyPatch = applyPatch;
function createVersionMismatchWarning({ packageName, actualVersion, originalVersion, pathSpecifier, path, }) {
    return `
${chalk_1.default.yellow("Warning:")} patch-package detected a patch file version mismatch

  Don't worry! This is probably fine. The patch was still applied
  successfully. Here's the deets:

  Patch file created for

    ${packageName}@${chalk_1.default.bold(originalVersion)}

  applied to

    ${packageName}@${chalk_1.default.bold(actualVersion)}
  
  At path
  
    ${path}

  This warning is just to give you a heads-up. There is a small chance of
  breakage even though the patch was applied successfully. Make sure the package
  still behaves like you expect (you wrote tests, right?) and then run

    ${chalk_1.default.bold(`patch-package ${pathSpecifier}`)}

  to update the version in the patch file name and make this warning go away.
`;
}
function createBrokenPatchFileError({ packageName, patchFileName, path, pathSpecifier, }) {
    return `
${chalk_1.default.red.bold("**ERROR**")} ${chalk_1.default.red(`Failed to apply patch for package ${chalk_1.default.bold(packageName)} at path`)}
  
    ${path}

  This error was caused because patch-package cannot apply the following patch file:

    patches/${patchFileName}

  Try removing node_modules and trying again. If that doesn't work, maybe there was
  an accidental change made to the patch file? Try recreating it by manually
  editing the appropriate files and running:
  
    patch-package ${pathSpecifier}
  
  If that doesn't work, then it's a bug in patch-package, so please submit a bug
  report. Thanks!

    https://github.com/ds300/patch-package/issues
    
`;
}
function createPatchApplictionFailureError({ packageName, actualVersion, originalVersion, patchFileName, path, pathSpecifier, }) {
    return `
${chalk_1.default.red.bold("**ERROR**")} ${chalk_1.default.red(`Failed to apply patch for package ${chalk_1.default.bold(packageName)} at path`)}
  
    ${path}

  This error was caused because ${chalk_1.default.bold(packageName)} has changed since you
  made the patch file for it. This introduced conflicts with your patch,
  just like a merge conflict in Git when separate incompatible changes are
  made to the same piece of code.

  Maybe this means your patch file is no longer necessary, in which case
  hooray! Just delete it!

  Otherwise, you need to generate a new patch file.

  To generate a new one, just repeat the steps you made to generate the first
  one.

  i.e. manually make the appropriate file changes, then run 

    patch-package ${pathSpecifier}

  Info:
    Patch file: patches/${patchFileName}
    Patch was made for version: ${chalk_1.default.green.bold(originalVersion)}
    Installed version: ${chalk_1.default.red.bold(actualVersion)}
`;
}
function createUnexpectedError({ filename, error, }) {
    var stack = (error instanceof Error) ? error.stack : error;
    return `
${chalk_1.default.red.bold("**ERROR**")} ${chalk_1.default.red(`Failed to apply patch file ${chalk_1.default.bold(filename)}`)}
  
${stack}

  `;
}
//# sourceMappingURL=data:application/json;base64,