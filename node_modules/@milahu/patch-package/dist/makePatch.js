"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePatch = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path_1 = require("./path");
const spawnSafe_1 = require("./spawnSafe");
const filterFiles_1 = require("./filterFiles");
const fs_extra_1 = require("fs-extra");
const rimraf_1 = require("rimraf");
const fs_extra_2 = require("fs-extra");
const tmp_1 = require("tmp");
const patchFs_1 = require("./patchFs");
const PackageDetails_1 = require("./PackageDetails");
const resolveRelativeFileDependencies_1 = require("./resolveRelativeFileDependencies");
const getPackageResolution_1 = require("./getPackageResolution");
const parse_1 = require("./patch/parse");
const zlib_1 = require("zlib");
const getPackageVersion_1 = require("./getPackageVersion");
const createIssue_1 = require("./createIssue");
const child_process_1 = require("child_process");
// globals are set in src/index.ts
const isVerbose = global.patchPackageIsVerbose;
const isDebug = global.patchPackageIsDebug;
const patchPackageVersion = global.patchPackageVersion;
function printNoPackageFoundError(packageName, packageJsonPath) {
    console.error(`No such package ${packageName}

  File not found: ${packageJsonPath}`);
}
function makePatch({ packagePathSpecifier, appPath, packageManager, includePaths, excludePaths, patchDir, createIssue, }) {
    const packageDetails = (0, PackageDetails_1.getPatchDetailsFromCliString)(packagePathSpecifier);
    if (!packageDetails) {
        console.error("No such package", packagePathSpecifier);
        return;
    }
    const appPackageJson = require((0, path_1.join)(appPath, "package.json"));
    const packagePath = (0, path_1.join)(appPath, packageDetails.path);
    const packageJsonPath = (0, path_1.join)(packagePath, "package.json");
    if (isDebug) {
        console.log(`patch-package/makePatch: appPath = ${appPath}`);
        console.log(`patch-package/makePatch: packagePath = ${packagePath}`);
        console.log(`patch-package/makePatch: appPackageJson:`);
        console.dir(appPackageJson);
    }
    if (!(0, fs_extra_1.existsSync)(packageJsonPath)) {
        printNoPackageFoundError(packagePathSpecifier, packageJsonPath);
        process.exit(1);
    }
    const tmpRepo = (0, tmp_1.dirSync)({
        unsafeCleanup: true,
        prefix: "patch-package.tmpRepo.",
    });
    function cleanup() {
        if (isDebug) {
            console.log(`patch-package/makePatch: cleanup: keeping temporary files: ${tmpRepo.name}`);
            return;
        }
        tmpRepo.removeCallback();
    }
    try {
        // finally: cleanup()
        const tmpRepoPackagePath = (0, path_1.join)(tmpRepo.name, packageDetails.path);
        const tmpRepoNpmRoot = tmpRepoPackagePath.slice(0, -`/node_modules/${packageDetails.name}`.length);
        const tmpRepoPackageJsonPath = (0, path_1.join)(tmpRepoNpmRoot, "package.json");
        const patchesDir = (0, path_1.resolve)((0, path_1.join)(appPath, patchDir));
        console.info(chalk_1.default.grey("•"), "Creating temporary folder");
        if (isDebug) {
            console.log(`patch-package/makePatch: tmpRepoNpmRoot = ${tmpRepoNpmRoot}`);
        }
        const resolvedVersion = (0, getPackageResolution_1.getPackageResolution)({
            packageDetails,
            packageManager,
            appPath,
            appPackageJson,
        });
        // make a blank package.json
        (0, fs_extra_1.mkdirpSync)(tmpRepoNpmRoot);
        (0, fs_extra_1.writeFileSync)(tmpRepoPackageJsonPath, JSON.stringify({
            dependencies: {
                [packageDetails.name]: resolvedVersion.version,
            },
            resolutions: (0, resolveRelativeFileDependencies_1.resolveRelativeFileDependencies)(appPath, appPackageJson.resolutions || {}),
        }));
        const declaredVersion = (() => {
            var v = resolvedVersion.version;
            // https://docs.npmjs.com/cli/v7/configuring-npm/package-json
            // <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
            // pnpm uses link: protocol instead of file:
            // TODO add more protocols?
            var m = v.match(/^(file|link|http|https|git|git\+https|git\+http|git\+ssh|git\+file|github):(.+)$/);
            if (m) {
                var protocol = m[1];
                var location = m[2];
                var isGit = protocol.startsWith('git');
                var gitCommit = (isGit && location.includes("#")) ? location.split('#').slice(-1)[0] : null;
                if (isDebug) {
                    console.dir({ loc: 'get declaredVersion', isGit, gitCommit });
                }
                if (isGit && !gitCommit) {
                    var error = new Error(`found wildcard git version ${v}. \
package.json must pin the exact version of ${packageDetails.name} \
in the format <protocol>:<packagePath>#<commitHash>. \
commitHash is the full hash with 40 chars.`);
                    delete error.stack;
                    throw error;
                    /* too complex
                    // guess commit hash of installed package
                    var stats = lstatSync(packageDetails.path)
                    if (stats.isSymbolicLink()) {
                      var linkTarget = readlinkSync(packageDetails.path)
                      if (linkTarget.startsWith(".pnpm")) {
                        var match = linkTarget.match(/^\.pnpm\/[^/]+@([0-9a-f]{10})_[0-9a-f]{32}\//)
                        if (match) {
                          gitCommit = match[1]
                          if (isDebug) console.log(`parsed gitCommit ${gitCommit} from pnpm symlink`)
                        }
                      }
                    }
                    */
                }
                if (isGit) {
                    return { full: v, protocol, location, gitCommit };
                }
                else {
                    // sample: https://registry.yarnpkg.com/left-pad/-/left-pad-1.3.0.tgz#5b8a3a7765dfe001261dde915589e782f8c94d1e
                    // hash is sha1sum of tgz file
                    // -> use version number from package's package.json
                    var version = (0, getPackageVersion_1.getPackageVersion)((0, path_1.join)((0, path_1.resolve)(packageDetails.path), "package.json"));
                    if (isVerbose) {
                        console.log(`patch-package/makePatch: using version ${version} from ${packageDetails.name}/package.json`);
                    }
                    return { version };
                }
            }
            // https://docs.npmjs.com/about-semantic-versioning
            // TODO handle protocols? pnpm workspace: protocol does not make sense here, no need to patch local packages
            var m = v.match(/^([~^])(.*)$/);
            if (m) {
                var exampleVersion = m[1];
                if (!exampleVersion) {
                    exampleVersion = '1.0.0';
                }
                console.warn(`patch-package/makePatch: warning: found wildcard version ${v}. \
to ensure successful patching, package.json should pin the exact version of ${packageDetails.name} \
in the format <major>.<minor>.<patch>, for example: "${packageDetails.name}": "${exampleVersion}"`);
            }
            return { full: v, version: v };
        })();
        if (isDebug) {
            //console.log(`patch-package/makePatch: resolvedVersion.originCommit = ${resolvedVersion.originCommit}`)
            console.log(`patch-package/makePatch: declaredVersion.version = ${declaredVersion.version}`);
            console.log(`patch-package/makePatch: declaredVersion.gitCommit = ${declaredVersion.gitCommit}`);
            console.log(`patch-package/makePatch: declaredVersion.full = ${declaredVersion.full}`);
        }
        const packageVersion = (declaredVersion.version || declaredVersion.gitCommit || declaredVersion.full);
        // originCommit is more precise than pkg.version
        if (isDebug) {
            //console.log(`patch-package/makePatch: resolvedVersion.originCommit = ${resolvedVersion.originCommit}`)
            console.log(`patch-package/makePatch: resolvedVersion.version = ${resolvedVersion.version}`);
            console.log(`patch-package/makePatch: packageVersion = ${packageVersion}`);
        }
        //const packageVersion =
        //  resolvedVersion.originCommit ||
        //  getPackageVersion(join(resolve(packageDetails.path), "package.json"))
        // this is broken when installing from git -> version can be a pseudo-version like 1.0.0-canary
        //const packageVersion = getPackageVersion(join(resolve(packageDetails.path), "package.json"))
        // TODO rename resolvedVersion -> declaredVersion
        // FIXME false positive
        // test integration-tests/create-issue/create-issue.test.ts
        // -> patching left-pad prompts to submit an issue
        // https://registry.yarnpkg.com/left-pad/-/left-pad-1.3.0.tgz#5b8a3a7765dfe001261dde915589e782f8c94d1e
        // hash is sha checksum of tgz file -> just use the version 1.3.0
        /*
        const packageVersion = (
          !resolvedVersion.version.match(/^(file:|link:)/) ? resolvedVersion.version :
          getPackageVersion(join(resolve(packageDetails.path), "package.json"))
        )
        */
        if (isDebug) {
            console.log(`patch-package/makePatch: getPackageVersion -> ${(0, getPackageVersion_1.getPackageVersion)((0, path_1.join)((0, path_1.resolve)(packageDetails.path), "package.json"))}`);
            console.log(`patch-package/makePatch: package path = ${packageDetails.path}`);
            console.log(`patch-package/makePatch: package path resolved = ${(0, path_1.resolve)(packageDetails.path)}`);
        }
        // copy .npmrc/.yarnrc in case packages are hosted in private registry
        // tslint:disable-next-line:align
        ;
        [".npmrc", ".yarnrc"].forEach((rcFile) => {
            const rcPath = (0, path_1.join)(appPath, rcFile);
            if ((0, fs_extra_1.existsSync)(rcPath)) {
                (0, fs_extra_2.copySync)(rcPath, (0, path_1.join)(tmpRepo.name, rcFile));
            }
        });
        if (packageManager === "yarn") {
            console.info(chalk_1.default.grey("•"), `Installing ${packageDetails.name}@${packageVersion} with yarn`);
            try {
                // try first without ignoring scripts in case they are required
                // this works in 99.99% of cases
                (0, spawnSafe_1.spawnSafeSync)(`yarn`, ["install", "--ignore-engines"], {
                    cwd: tmpRepoNpmRoot,
                    logStdErrOnError: false,
                });
            }
            catch (e) {
                // try again while ignoring scripts in case the script depends on
                // an implicit context which we havn't reproduced
                (0, spawnSafe_1.spawnSafeSync)(`yarn`, ["install", "--ignore-engines", "--ignore-scripts"], {
                    cwd: tmpRepoNpmRoot,
                });
            }
        }
        else {
            const npmCmd = packageManager === "pnpm" ? "pnpm" : "npm";
            console.info(chalk_1.default.grey("•"), `Installing ${packageDetails.name}@${packageVersion} with ${npmCmd}`);
            try {
                // try first without ignoring scripts in case they are required
                // this works in 99.99% of cases
                if (isVerbose) {
                    console.log(`patch-package/makePatch: run "${npmCmd} install --force" in ${tmpRepoNpmRoot}`);
                }
                (0, spawnSafe_1.spawnSafeSync)(npmCmd, ["install", "--force"], {
                    cwd: tmpRepoNpmRoot,
                    logStdErrOnError: false,
                    stdio: isVerbose ? "inherit" : "ignore",
                });
            }
            catch (e) {
                // try again while ignoring scripts in case the script depends on
                // an implicit context which we havn't reproduced
                if (isVerbose) {
                    console.log(`patch-package/makePatch: run "${npmCmd} install --ignore-scripts --force" in ${tmpRepoNpmRoot}`);
                }
                (0, spawnSafe_1.spawnSafeSync)(npmCmd, ["install", "--ignore-scripts", "--force"], {
                    cwd: tmpRepoNpmRoot,
                    stdio: isVerbose ? "inherit" : "ignore",
                });
            }
            if (packageManager === "pnpm") {
                // workaround for `git diff`: replace symlink with hardlink
                const pkgPath = tmpRepoNpmRoot + "/node_modules/" + packageDetails.name;
                const realPath = (0, fs_extra_1.realpathSync)(pkgPath);
                (0, fs_extra_1.unlinkSync)(pkgPath); // rm symlink
                (0, fs_extra_1.renameSync)(realPath, pkgPath);
            }
        }
        function git(...args) {
            if (isDebug) {
                const argsStr = JSON.stringify(["git", ...args]);
                console.log(`patch-package/makePatch: spawn: args = ${argsStr} + workdir = ${tmpRepo.name}`);
            }
            return (0, spawnSafe_1.spawnSafeSync)("git", args, {
                cwd: tmpRepo.name,
                env: Object.assign(Object.assign({}, process.env), { HOME: tmpRepo.name }),
                maxBuffer: 1024 * 1024 * 100,
            });
        }
        // remove nested node_modules just to be safe
        (0, rimraf_1.sync)((0, path_1.join)(tmpRepoPackagePath, "node_modules"));
        // remove .git just to be safe
        (0, rimraf_1.sync)((0, path_1.join)(tmpRepoPackagePath, ".git"));
        // commit the package
        console.info(chalk_1.default.grey("•"), "Diffing your files with clean files");
        (0, fs_extra_1.writeFileSync)((0, path_1.join)(tmpRepo.name, ".gitignore"), "!/node_modules\n\n");
        git("-c", "init.defaultBranch=main", "init");
        // remove ignored files first
        // use CLI options --exclude and --include
        (0, filterFiles_1.removeIgnoredFiles)(tmpRepoPackagePath, includePaths, excludePaths);
        git("add", "-f", packageDetails.path);
        if (isVerbose) {
            console.log(`git status:\n` + git("status").stdout.toString());
        }
        git("-c", "user.name=patch-package", "-c", "user.email=", "commit", "--allow-empty", "-m", "init");
        // replace package with user's version
        if (isVerbose) {
            console.log(`patch-package/makePatch: remove all files in ${tmpRepoPackagePath}`);
        }
        (0, rimraf_1.sync)(tmpRepoPackagePath);
        if (isVerbose) {
            console.log(`patch-package/makePatch: git status:\n` + git("status").stdout.toString());
        }
        // pnpm installs packages as symlinks, copySync would copy only the symlink
        // with pnpm, realpath resolves to ./node_modules/.pnpm/${name}@${version}
        const srcPath = (0, fs_extra_1.realpathSync)(packagePath);
        if (isVerbose) {
            console.log(`patch-package/makePatch: copy ${srcPath} to ${tmpRepoPackagePath} + skip ${srcPath}/node_modules/`);
        }
        (0, fs_extra_2.copySync)(srcPath, tmpRepoPackagePath, {
            filter: (path) => {
                const doCopy = !path.startsWith(srcPath + "/node_modules/");
                if (isVerbose) {
                    if (doCopy) {
                        console.log(`patch-package/makePatch: copySync: copy file ${path}`);
                    }
                    else {
                        console.log(`patch-package/makePatch: copySync: skip file ${path}`);
                    }
                }
                return doCopy;
            },
        });
        if (isDebug) {
            // list files
            // NOTE this works only on linux
            console.log(`patch-package/makePatch: files in srcPath = ${srcPath}`);
            console.log((0, child_process_1.spawnSync)('find', ['.'], { cwd: srcPath, encoding: 'utf8' }).stdout);
            console.log(`patch-package/makePatch: files in tmpRepoPackagePath = ${tmpRepoPackagePath}`);
            console.log((0, child_process_1.spawnSync)('find', ['.'], { cwd: tmpRepoPackagePath, encoding: 'utf8' }).stdout);
        }
        // remove nested node_modules just to be safe
        (0, rimraf_1.sync)((0, path_1.join)(tmpRepoPackagePath, "node_modules"));
        // remove .git just to be safe
        // NOTE this removes ./node_modules/${dependencyName}/.git not ./.git
        (0, rimraf_1.sync)((0, path_1.join)(tmpRepoPackagePath, ".git"));
        // also remove ignored files like before
        // for example, remove package.json
        // TODO support patching package.json via semantic json diff
        // use CLI options --exclude and --include
        if (isDebug) {
            console.log(`patch-package/makePatch: removing ignored files in tmpRepoPackagePath = ${tmpRepoPackagePath}:`);
        }
        (0, filterFiles_1.removeIgnoredFiles)(tmpRepoPackagePath, includePaths, excludePaths);
        if (isDebug) {
            // list files
            // NOTE this works only on linux
            console.log(`patch-package/makePatch: files in tmpRepoPackagePath = ${tmpRepoPackagePath}:`);
            console.log((0, child_process_1.spawnSync)('find', ['.', '-type', 'f'], { cwd: tmpRepoPackagePath, encoding: 'utf8' }).stdout);
        }
        // stage all files
        git("add", "-f", packageDetails.path);
        if (isVerbose) {
            console.log(`patch-package/makePatch: git status:\n` + git("status").stdout.toString());
        }
        const ignorePaths = ["package-lock.json", "pnpm-lock.yaml"];
        // get diff of changes
        const diffResult = git("diff", "--cached", "--no-color", "--ignore-space-at-eol", "--no-ext-diff", ...ignorePaths.map((path) => `:(exclude,top)${packageDetails.path}/${path}`));
        if (diffResult.stdout.length === 0) {
            console.warn(`⁉️  Not creating patch file for package '${packagePathSpecifier}'`);
            console.warn(`⁉️  There don't appear to be any changes.`);
            cleanup();
            process.exit(1);
            return;
        }
        try {
            (0, parse_1.parsePatchFile)(diffResult.stdout.toString());
        }
        catch (e) {
            if (!(e instanceof Error))
                return;
            if (e.message.includes("Unexpected file mode string: 120000")) {
                console.error(`
⛔️ ${chalk_1.default.red.bold("ERROR")}

  Your changes involve creating symlinks. patch-package does not yet support
  symlinks.
  
  ️Please use ${chalk_1.default.bold("--include")} and/or ${chalk_1.default.bold("--exclude")} to narrow the scope of your patch if
  this was unintentional.
`);
            }
            else {
                const outPath = "./patch-package-error.json.gz";
                (0, fs_extra_1.writeFileSync)(outPath, (0, zlib_1.gzipSync)(JSON.stringify({
                    error: { message: e.message, stack: e.stack },
                    patch: diffResult.stdout.toString(),
                })));
                console.error(`
⛔️ ${chalk_1.default.red.bold("ERROR")}
        
  patch-package was unable to read the patch-file made by git. This should not
  happen.
  
  A diagnostic file was written to
  
    ${outPath}
  
  Please attach it to a github issue
  
    https://github.com/ds300/patch-package/issues/new?title=New+patch+parse+failed&body=Please+attach+the+diagnostic+file+by+dragging+it+into+here+🙏
  
  Note that this diagnostic file will contain code from the package you were
  attempting to patch.

`);
            }
            cleanup();
            process.exit(1);
            return;
        }
        // maybe delete existing
        (0, patchFs_1.getPatchFiles)(patchDir).forEach((filename) => {
            const deets = (0, PackageDetails_1.getPackageDetailsFromPatchFilename)(filename);
            if (deets && deets.path === packageDetails.path) {
                (0, fs_extra_1.unlinkSync)((0, path_1.join)(patchDir, filename));
            }
        });
        // patchfiles are parsed in patch/parse.ts function parsePatchLines
        // -> header comments are ignored
        let diffHeader = "";
        diffHeader += `# generated by patch-package ${patchPackageVersion}\n`;
        diffHeader += `#\n`;
        if (isDebug) {
            resolvedVersion.version;
        }
        diffHeader += `# declared package:\n`;
        diffHeader += `#   ${packageDetails.name}: ${resolvedVersion.declaredVersion}\n`;
        // NOTE: we do *not* include the locked version from package-lock.json or yarn.lock or pnpm-lock.yaml or ...
        // because patch-package should work with all package managers (should be manager-agnostic)
        // users can pin versions in package.json
        diffHeader += `#\n`;
        const patchFileName = createPatchFileName({
            packageDetails,
            packageVersion,
        });
        const patchPath = (0, path_1.join)(patchesDir, patchFileName);
        if (!(0, fs_extra_1.existsSync)((0, path_1.dirname)(patchPath))) {
            (0, fs_extra_1.mkdirSync)((0, path_1.dirname)(patchPath), { recursive: true });
        }
        (0, fs_extra_1.writeFileSync)(patchPath, diffHeader + diffResult.stdout);
        console.log(`${chalk_1.default.green("✔")} Created file ${(0, path_1.join)(patchDir, patchFileName)}\n`);
        if (createIssue) {
            (0, createIssue_1.openIssueCreationLink)({
                packageDetails,
                patchFileContents: diffResult.stdout.toString(),
                packageVersion,
            });
        }
        else {
            (0, createIssue_1.maybePrintIssueCreationPrompt)(packageDetails, packageManager);
        }
    }
    catch (e) {
        //console.error(e)
        throw e;
    }
    finally {
        cleanup();
    }
}
exports.makePatch = makePatch;
function createPatchFileName({ packageDetails, packageVersion, }) {
    const packageNames = packageDetails.packageNames
        .map((name) => name.replace(/\//g, "+"))
        .join("++");
    return `${packageNames}+${packageVersion}.patch`;
}
//# sourceMappingURL=data:application/json;base64,