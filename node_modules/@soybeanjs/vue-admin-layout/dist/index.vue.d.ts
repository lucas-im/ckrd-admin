declare const _sfc_main: import("vue").DefineComponent<{
    mode: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    isMobile: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    maskBg: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    useMinWidthLayout: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    minWidth: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    headerVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    headerHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    tabVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    tabHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    fixedHeaderAndTab: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    addMainOverflowHidden: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    footerVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    footerHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    fixedFooter: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    siderVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    siderWidth: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    siderCollapsedWidth: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    siderCollapse: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    transitionDuration: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    transitionTimingFunction: {
        type: StringConstructor;
        required: false;
        default: string;
    };
}, {
    props: {
        mode: 'vertical' | 'horizontal';
        isMobile: boolean;
        maskBg: string;
        useMinWidthLayout: boolean;
        minWidth: number;
        headerVisible: boolean;
        headerHeight: number;
        tabVisible: boolean;
        tabHeight: number;
        fixedHeaderAndTab: boolean;
        addMainOverflowHidden: boolean;
        footerVisible: boolean;
        footerHeight: number;
        fixedFooter: boolean;
        siderVisible: boolean;
        siderWidth: number;
        siderCollapsedWidth: number;
        siderCollapse: boolean;
        transitionDuration: number;
        transitionTimingFunction: string;
    };
    emit: (e: 'update:sider-collapse', collapse: boolean) => void;
    style: import("vue").ComputedRef<string>;
    hasFixedEl: import("vue").ComputedRef<boolean>;
    transformStyle: import("vue").ComputedRef<string>;
    headerAndTabTransform: import("vue").ComputedRef<string>;
    footerTransform: import("vue").ComputedRef<string>;
    commonProps: import("vue").ComputedRef<{
        transitionDuration: number;
        transitionTimingFunction: string;
    }>;
    isVertical: import("vue").ComputedRef<boolean>;
    headerZIndex: number;
    tabZIndex: number;
    siderZIndex: import("vue").ComputedRef<1003 | 1000>;
    footerZIndex: number;
    siderCollapseStatus: import("vue").WritableComputedRef<unknown>;
    handleClickMask: () => void;
    showMask: import("vue").ComputedRef<boolean>;
    siderStyle: import("vue").ComputedRef<string>;
    currentSiderWidth: import("vue").ComputedRef<number>;
    commonPaddingLeft: import("vue").ComputedRef<number>;
    headerPaddingLeft: import("vue").ComputedRef<number>;
    siderPaddingTop: import("vue").ComputedRef<number>;
    contentPaddingTop: import("vue").ComputedRef<number>;
    contentPaddingBottom: import("vue").ComputedRef<number>;
    c: import("css-render").createCNode<import("css-render").CSelector>;
    cStyle: import("css-render").CNode;
    LayoutHeader: import("vue").DefineComponent<{
        fixed: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        zIndex: {
            type: NumberConstructor;
            required: false; /** 给主体内容添加禁止溢出 */
            default: number;
        };
        useMinWidthLayout: {
            type: BooleanConstructor;
            required: false;
        };
        minWidth: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        height: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionDuration: {
            type: NumberConstructor; /** 侧边栏折叠状态 */
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            fixed: boolean;
            zIndex: number;
            useMinWidthLayout?: boolean | undefined;
            minWidth: number;
            height: number;
            paddingLeft: number;
            transitionDuration: number;
            transitionTimingFunction: string;
        };
        style: import("vue").ComputedRef<string>;
        c: import("css-render").createCNode<import("css-render").CSelector>;
        cStyle: import("css-render").CNode;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        fixed: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        zIndex: {
            type: NumberConstructor;
            required: false; /** 给主体内容添加禁止溢出 */
            default: number;
        };
        useMinWidthLayout: {
            type: BooleanConstructor;
            required: false;
        };
        minWidth: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        height: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionDuration: {
            type: NumberConstructor; /** 侧边栏折叠状态 */
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        fixed: boolean;
        useMinWidthLayout: boolean;
        minWidth: number;
        transitionDuration: number;
        transitionTimingFunction: string;
        height: number;
        zIndex: number;
        paddingLeft: number;
    }>;
    LayoutTab: import("vue").DefineComponent<{
        fixed: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        top: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        zIndex: {
            type: NumberConstructor;
            required: false;
            /** 底部高度 */
            default: number;
        };
        useMinWidthLayout: {
            type: BooleanConstructor;
            required: false;
        };
        minWidth: {
            type: NumberConstructor;
            required: false; /** 侧边栏高度 */
            default: number;
        };
        height: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionDuration: {
            type: NumberConstructor; /** 动画过渡速度曲线 */
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            fixed: boolean;
            top: number;
            zIndex: number;
            useMinWidthLayout?: boolean | undefined;
            minWidth: number;
            height: number;
            paddingLeft: number;
            transitionDuration: number;
            transitionTimingFunction: string;
        };
        style: import("vue").ComputedRef<string>;
        c: import("css-render").createCNode<import("css-render").CSelector>;
        cStyle: import("css-render").CNode;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        fixed: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        top: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        zIndex: {
            type: NumberConstructor;
            required: false;
            /** 底部高度 */
            default: number;
        };
        useMinWidthLayout: {
            type: BooleanConstructor;
            required: false;
        };
        minWidth: {
            type: NumberConstructor;
            required: false; /** 侧边栏高度 */
            default: number;
        };
        height: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionDuration: {
            type: NumberConstructor; /** 动画过渡速度曲线 */
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        fixed: boolean;
        useMinWidthLayout: boolean;
        minWidth: number;
        transitionDuration: number;
        transitionTimingFunction: string;
        height: number;
        top: number;
        zIndex: number;
        paddingLeft: number;
    }>;
    LayoutSider: import("vue").DefineComponent<{
        zIndex: {
            type: NumberConstructor;
            /** 头部可见 */
            required: false;
            default: number;
        };
        width: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingTop: {
            type: NumberConstructor;
            required: false;
            default: number;
        }; /** 固定头部和标签 */
        transitionDuration: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            zIndex: number;
            width: number;
            paddingTop: number;
            transitionDuration: number;
            transitionTimingFunction: string; /** 侧边栏折叠状态 */
        };
        style: import("vue").ComputedRef<string>;
        c: import("css-render").createCNode<import("css-render").CSelector>;
        cStyle: import("css-render").CNode;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        zIndex: {
            type: NumberConstructor;
            /** 头部可见 */
            required: false;
            default: number;
        };
        width: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingTop: {
            type: NumberConstructor;
            required: false;
            default: number;
        }; /** 固定头部和标签 */
        transitionDuration: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        transitionDuration: number;
        transitionTimingFunction: string;
        width: number;
        zIndex: number;
        paddingTop: number;
    }>;
    LayoutContent: import("vue").DefineComponent<{
        paddingTop: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingBottom: {
            type: NumberConstructor;
            required: false;
            default: number;
        }; /** 固定头部和标签 */
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        overflowHidden: {
            type: BooleanConstructor;
            /** 底部可见 */
            required: false;
        };
        transitionDuration: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            paddingTop: number;
            paddingBottom: number;
            paddingLeft: number;
            overflowHidden?: boolean | undefined;
            transitionDuration: number;
            transitionTimingFunction: string;
        };
        style: import("vue").ComputedRef<string>;
        c: import("css-render").createCNode<import("css-render").CSelector>;
        cStyle: import("css-render").CNode;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        paddingTop: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingBottom: {
            type: NumberConstructor;
            required: false;
            default: number;
        }; /** 固定头部和标签 */
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        overflowHidden: {
            type: BooleanConstructor;
            /** 底部可见 */
            required: false;
        };
        transitionDuration: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        transitionDuration: number;
        transitionTimingFunction: string;
        paddingLeft: number;
        paddingTop: number;
        paddingBottom: number;
        overflowHidden: boolean;
    }>;
    LayoutFooter: import("vue").DefineComponent<{
        fixed: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        zIndex: {
            type: NumberConstructor;
            required: false; /** 给主体内容添加禁止溢出 */
            default: number;
        };
        useMinWidthLayout: {
            type: BooleanConstructor; /** 底部可见 */
            required: false;
        };
        minWidth: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        height: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            /** 侧边栏折叠状态的高度 */
            default: number;
        };
        transitionDuration: {
            type: NumberConstructor; /** 侧边栏折叠状态 */
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: {
            fixed: boolean;
            zIndex: number;
            useMinWidthLayout?: boolean | undefined;
            minWidth: number;
            height: number;
            paddingLeft: number;
            transitionDuration: number;
            transitionTimingFunction: string;
        };
        style: import("vue").ComputedRef<string>;
        c: import("css-render").createCNode<import("css-render").CSelector>;
        cStyle: import("css-render").CNode;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        fixed: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        zIndex: {
            type: NumberConstructor;
            required: false; /** 给主体内容添加禁止溢出 */
            default: number;
        };
        useMinWidthLayout: {
            type: BooleanConstructor; /** 底部可见 */
            required: false;
        };
        minWidth: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        height: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        paddingLeft: {
            type: NumberConstructor;
            required: false;
            /** 侧边栏折叠状态的高度 */
            default: number;
        };
        transitionDuration: {
            type: NumberConstructor; /** 侧边栏折叠状态 */
            required: false;
            default: number;
        };
        transitionTimingFunction: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        fixed: boolean;
        useMinWidthLayout: boolean;
        minWidth: number;
        transitionDuration: number;
        transitionTimingFunction: string;
        height: number;
        zIndex: number;
        paddingLeft: number;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:sider-collapse"[], "update:sider-collapse", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    mode: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    isMobile: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    maskBg: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    useMinWidthLayout: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    minWidth: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    headerVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    headerHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    tabVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    tabHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    fixedHeaderAndTab: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    addMainOverflowHidden: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    footerVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    footerHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    fixedFooter: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    siderVisible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    siderWidth: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    siderCollapsedWidth: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    siderCollapse: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    transitionDuration: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    transitionTimingFunction: {
        type: StringConstructor;
        required: false;
        default: string;
    };
}>> & {
    "onUpdate:sider-collapse"?: ((...args: any[]) => any) | undefined;
}, {
    mode: string;
    isMobile: boolean;
    maskBg: string;
    useMinWidthLayout: boolean;
    minWidth: number;
    headerVisible: boolean;
    headerHeight: number;
    tabVisible: boolean;
    tabHeight: number;
    fixedHeaderAndTab: boolean;
    addMainOverflowHidden: boolean;
    footerVisible: boolean;
    footerHeight: number;
    fixedFooter: boolean;
    siderVisible: boolean;
    siderWidth: number;
    siderCollapsedWidth: number;
    siderCollapse: boolean;
    transitionDuration: number;
    transitionTimingFunction: string;
}>;
export default _sfc_main;
