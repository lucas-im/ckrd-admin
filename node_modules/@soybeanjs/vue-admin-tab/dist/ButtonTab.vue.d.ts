declare const _sfc_main: import("vue").DefineComponent<{
    darkMode: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isActive: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    primaryColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    borderColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    darkBorderColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}, {
    props: {
        darkMode: boolean;
        isActive: boolean;
        primaryColor: string;
        borderColor: string;
        darkBorderColor: string;
        closable: boolean;
    };
    emit: (e: 'close') => void;
    isHover: import("vue").Ref<boolean>;
    setTrue: () => void;
    setFalse: () => void;
    isIconActive: import("vue").ComputedRef<boolean>;
    buttonStyle: import("vue").ComputedRef<Record<string, string>>;
    handleClose: (e: MouseEvent) => void;
    c: import("css-render").createCNode<import("css-render").CSelector>;
    style: import("css-render").CNode;
    IconClose: import("vue").DefineComponent<{
        isActive: {
            type: BooleanConstructor;
            required: false;
        };
        defaultColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        activeColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        isHover: import("vue").Ref<boolean>;
        setTrue: () => void;
        setFalse: () => void;
        c: import("css-render").createCNode<import("css-render").CSelector>;
        style: import("css-render").CNode;
        SvgClose: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
        SvgCloseCircle: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        isActive: {
            type: BooleanConstructor;
            required: false;
        };
        defaultColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        activeColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        isActive: boolean;
        defaultColor: string;
        activeColor: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "close"[], "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    darkMode: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isActive: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    primaryColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    borderColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    darkBorderColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>> & {
    onClose?: ((...args: any[]) => any) | undefined;
}, {
    darkMode: boolean;
    isActive: boolean;
    primaryColor: string;
    borderColor: string;
    darkBorderColor: string;
    closable: boolean;
}>;
export default _sfc_main;
