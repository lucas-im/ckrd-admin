declare const _sfc_main: import("vue").DefineComponent<{
    darkMode: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isActive: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    primaryColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    bgColor: {
        type: ArrayConstructor;
        required: false;
        default: () => string[];
    };
    hoverBgColor: {
        type: ArrayConstructor;
        required: false;
        default: () => string[];
    };
    mixColor: {
        type: ArrayConstructor;
        required: false;
        default: () => string[];
    };
    mixRatio: {
        type: ArrayConstructor;
        required: false;
        default: () => number[];
    };
}, {
    emit: (e: 'close') => void;
    isHover: import("vue").Ref<boolean>;
    setTrue: () => void;
    setFalse: () => void;
    handleClose: (e: MouseEvent) => void;
    c: import("css-render").createCNode<import("css-render").CSelector>;
    style: import("css-render").CNode;
    IconClose: import("vue").DefineComponent<{
        isActive: {
            type: BooleanConstructor;
            required: false;
        };
        defaultColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        activeColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        isHover: import("vue").Ref<boolean>;
        setTrue: () => void;
        setFalse: () => void;
        c: import("css-render").createCNode<import("css-render").CSelector>;
        style: import("css-render").CNode;
        SvgClose: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
        SvgCloseCircle: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        isActive: {
            type: BooleanConstructor;
            required: false;
        };
        defaultColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        activeColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        isActive: boolean;
        defaultColor: string;
        activeColor: string;
    }>;
    SvgRadiusBg: import("vue").DefineComponent<{
        darkMode: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isActive: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isHover: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        primaryColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bgColor: {
            type: ArrayConstructor;
            required: false;
            default: () => string[];
        };
        hoverBgColor: {
            type: ArrayConstructor;
            required: false;
            default: () => string[];
        };
        mixColor: {
            type: ArrayConstructor;
            required: false;
            default: () => string[];
        };
        mixRatio: {
            type: ArrayConstructor;
            required: false;
            default: () => number[];
        };
    }, {
        props: {
            darkMode: boolean;
            isActive: boolean;
            isHover: boolean;
            primaryColor: string;
            bgColor: [string, string];
            hoverBgColor: [string, string]; /** 点击关闭图标 */
            mixColor: [string, string];
            mixRatio: [number, number];
        };
        fill: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        darkMode: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isActive: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isHover: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        primaryColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bgColor: {
            type: ArrayConstructor;
            required: false;
            default: () => string[];
        };
        hoverBgColor: {
            type: ArrayConstructor;
            required: false;
            default: () => string[];
        };
        mixColor: {
            type: ArrayConstructor;
            required: false;
            default: () => string[];
        };
        mixRatio: {
            type: ArrayConstructor;
            required: false;
            default: () => number[];
        };
    }>>, {
        darkMode: boolean;
        isActive: boolean;
        primaryColor: string;
        bgColor: unknown[];
        hoverBgColor: unknown[];
        mixColor: unknown[];
        mixRatio: unknown[];
        isHover: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "close"[], "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    darkMode: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isActive: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    primaryColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    bgColor: {
        type: ArrayConstructor;
        required: false;
        default: () => string[];
    };
    hoverBgColor: {
        type: ArrayConstructor;
        required: false;
        default: () => string[];
    };
    mixColor: {
        type: ArrayConstructor;
        required: false;
        default: () => string[];
    };
    mixRatio: {
        type: ArrayConstructor;
        required: false;
        default: () => number[];
    };
}>> & {
    onClose?: ((...args: any[]) => any) | undefined;
}, {
    darkMode: boolean;
    isActive: boolean;
    primaryColor: string;
    closable: boolean;
    bgColor: unknown[];
    hoverBgColor: unknown[];
    mixColor: unknown[];
    mixRatio: unknown[];
}>;
export default _sfc_main;
